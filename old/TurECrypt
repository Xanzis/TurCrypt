#! /usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import random
import sys
from copy import copy
from binascii import hexlify, unhexlify
import pickle
from base64 import b64encode, b64decode
import time

def parse_arguments():
	parser = argparse.ArgumentParser(description="Xander's magic encryptificationifier")
	parser.add_argument("infile", metavar="I", type=str, help="Input file")
	parser.add_argument("outfile", metavar="O", type=str, help="Output file")
	parser.add_argument("password", metavar="P", type=str, help="Master Password")
	return parser.parse_args()

def doTuring(data, iters):
	tape = copy(data)
	place = random.randint(0, len(tape) - 1)
	state = '1'
	for i in range(iters):
		if state == '1' and tape[place] == '1':
			tape[place] = '0'
		elif state == '1'and tape[place] == '0':
			tape[place] = '1'
			state = '0'
		elif state == '0':
			state = tape[place]
		place = (place + 1) % len(tape)
#		print('.'.rjust((60 * i) / iters))
#		sys.stdout.write("\033[F")
	tape = ''.join(tape)
	nData = [tape[i:i+7].zfill(8) for i in range(0, len(tape), 7)]
	return [nData, place, state]

def encrypt(string, pwd, mastr):
	info = ''
	for char in string:
		info += bin(int(hexlify(char), 16))[2:].zfill(7)
	#Converts to array
	info = list(info)
	rslt = doTuring(info, pwd)
	eInfo = rslt[0]
	code = [hex(pwd * 3)[2:], '.', hex(rslt[1] * 7)[2:], '.', rslt[2]]
	code = ''.join(code)
	print("Passcode for decryption:")
	print(masterPass(code, mastr))
	for i in range(len(eInfo)):
		eInfo[i] = unhexlify(hex(int(eInfo[i], 2))[2:].zfill(2))
	return ''.join(eInfo)

def masterPass(dataOne, mstr):
	locOrd = []
	i=0
	dataOne = str(int(hexlify(dataOne), 16))
	locOrd = range(len(dataOne))
	random.seed(mstr)
	random.shuffle(locOrd)
	shift = random.randint(0, 10)
	code = ""
	for char in dataOne:
		code += str((int(char) + shift) % 10)
	nCode = ""
	for i in locOrd:
		nCode += code[i]
	nCode = hex(int(nCode))[2:-1]
	return b64encode(unhexlify(nCode.zfill(len(nCode)+(len(nCode)%2))))

def main():
	startTime = time.time()
	args = parse_arguments()
	contents = open(args.infile).read()
	data = list(contents)
	lim = ((len(data) > 30000) * 10 * len(data)) + ((len(data) < 30000) * 500000)
#	n = random.randint(lim, (lim * 4) + 200000)
	n = 1000000
	print "Estimated Seconds for Operation: " + str(n/2200000.0)
	enc = encrypt(data, n, args.password)
	pickle.dump(enc, open(args.outfile, 'wb'))
	endTime = time.time()
	print str(endTime - startTime) + " Seconds for Operation"

print("Welcome to the encryption system Mk. 2!")
if __name__ == '__main__':
	main()